@import url("https://fonts.googleapis.com/css2?family=Anton&display=swap");

/* ---------------------------------------------------------------------------- */
/* --------------------------- Global styling --------------------------------- */
/* ---------------------------------------------------------------------------- */

* {
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
}

html {
  font-family: "Anton", sans-serif;
  color: #333;
}

body {
  background-color: #eee;
  perspective: 1000px;
}

main {
  margin-top: 3rem;
  padding: 0px 2rem;
  width: 100%;
  display: flex;
}

header>h1 {
  margin-top: 1rem;
  display: block;
  text-align: center;
}

/* ---------------------------------------------------------------------------- */
/* --------------------------- Square styling --------------------------------- */
/* ---------------------------------------------------------------------------- */

.container {
  flex: 1;
  border: 2px solid white;
  display: flex;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1 / 1;
  margin-bottom: 5rem;
  border-radius: 4px;

  .square {
    width: 40%;
    height: 40%;
    max-width: 200px;
    max-height: 200px;
    background-color: green;
  }
}


/* ---------------------------------------------------------------------------- */
/* --------------------------- Square controls styling ------------------------ */
/* ---------------------------------------------------------------------------- */

.hidden {
  /* hidding the checkboxes and useing only labels instead */
  visibility: hidden;
}

.controls {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  & label {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid #333;
  }

  >div {
    width: fit-content;
    margin-bottom: 1rem;

    & label {
      display: inline-block;
    }
  }
}

#yaxie:checked {
  ~div {
    >div {
      >label {
        &.yaxie {
          background-color: greenyellow;
        }
      }
    }
  }
}

#xaxie:checked {
  ~div {
    >div {
      label {
        &.xaxie {
          background-color: greenyellow;
        }
      }
    }
  }
}

#zaxie:checked {
  ~div {
    >div {
      >label {
        &.zaxie {
          background-color: greenyellow;
        }
      }
    }
  }
}

#usePerspective:checked {
  ~div {
    >label {
      background-color: greenyellow;
    }
  }
}

/* ---------------------------------------------------------------------------- */
/* --------------------------- Animations ------------------------------------- */
/* ---------------------------------------------------------------------------- */

/* Note that when the rotation of the object on the X or Y axes is at 90° (or 270°, 450°, 630°, and so on) it will “disappear” from view */

#xaxie:checked {
  ~div {
    >.square {
      animation-name: moveX;
      animation-duration: 4s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
    }
  }
}

#yaxie:checked {
  ~div {
    >.square {
      animation-name: moveY;
      animation-duration: 4s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
    }
  }
}

#zaxie:checked {
  ~div {
    >.square {
      animation-name: moveZ;
      animation-duration: 4s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
    }
  }
}

#usePerspective:checked {

  /* why we need to apply perspective on child element? */
  /* perspective creates a 3D viewing space for child elements. */
  ~.container {
    -webkit-perspective: 15rem;
    perspective: 15rem;
    perspective-origin: center;
  }
}

@keyframes moveX {
  to {
    -webkit-transform: rotateX(360deg);
    transform: rotateX(360deg);
  }
}

@keyframes moveY {
  to {
    -webkit-transform: rotateY(360deg);
    transform: rotateY(360deg);
  }
}

@keyframes moveZ {
  to {
    -webkit-transform: rotateZ(360deg);
    transform: rotateZ(360deg);
  }
}

/* ---------------------------------------------------------------------------- */
/* --------------------------- Perspective Origin section --------------------- */
/* ---------------------------------------------------------------------------- */

#perspective_origin_container {
  >div {
    >h1 {
      display: block;
      text-align: center;
    }
  }
}

#perspective_order_container {
  width: 100%;
  padding: 0px 1rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;


  .origin_container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    width: 70%;

    .originContainer {
      flex: 1;
      border: 2px solid whitesmoke;
      aspect-ratio: 1 / 1;
      display: flex;
      flex-direction: column;
      gap: 5rem;
      align-items: center;
      justify-content: center;
      perspective: 40rem;

      .secondSquare {
        /* this style will apply on each element that has ".originContainer" and ".containerA" both and there childred with 
          class of "secondSquare" */
        width: 50%;
        height: 50%;
        background-color: green;

        .containerB & {
          /* secondSquare with parent clsss of "originContainer" and "containerB" both */
          background-color: red;
        }
      }
    }


  }


}

/* ---------------------------------------------------------------------------- */
/* ---------------- Perspective Origin section Animations --------------------- */
/* ---------------------------------------------------------------------------- */

/* .containerA {
  animation: originMove 4s infinite linear alternate;
} */

.containerA>.secondSquare {
  animation: moveSquare 4s infinite linear;
  animation-fill-mode: forwards;
}

.containerB>.secondSquare {
  animation-name: moveSquare2;
  animation-duration: 4s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-fill-mode: forwards;
}

@keyframes originMove {
  from {
    perspective-origin: left;
  }

  to {
    perspective-origin: right;
  }
}

@keyframes moveSquare {
  from {
    transform: rotateY(0deg) translateX(100%);
  }

  to {
    transform: rotateY(360deg) translateX(100%);
  }
}

@keyframes moveSquare2 {
  from {
    transform: translateX(100%) rotateY(0deg);
  }

  to {
    transform: translateX(100%) rotateY(360deg);
  }
}

/* ---------------------------------------------------------------------------- */
/* --------------------------- Perspective controls section --------------------- */
/* ---------------------------------------------------------------------------- */

:root {
  --perspective: 1000px;
  --rotateX: 0deg;
  --rotateY: 0deg;
  --translateZ: 0px;
  --perspective_origin: center;
}

#controls_perspective {
  margin-top: 5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;

  .range_controls {
    display: flex;
    flex-direction: column;
    width: 80%;

    input {
      flex: 1;
    }

    label {
      flex: 0.2;
      border: none;
    }
  }

  /* --------- Squares ------------- */
  .bigContainer {
    margin-top: 2rem;
    margin-bottom: 2rem;
    width: 40%;
    max-width: 500px;
    aspect-ratio: 1 / 1;
    border: 2px solid #333;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 5px;

    .squareContainer {
      border-radius: 12px;
      width: 50%;
      perspective: var(--perspective);
      perspective-origin: var(--perspective_origin);
      aspect-ratio: 1 / 1;
      border: 2px solid #333;

      .mainSquare {
        border-radius: 12px;
        width: 100%;
        aspect-ratio: 1 / 1;
        background-image: linear-gradient(45deg, orange, skyblue);
        transform: rotateX(var(--rotateX, 0deg)) rotateY(var(--rotateY, 0deg)) translateZ(var(--translateZ, 0deg));

        >p {
          padding: 10px 10px;
          text-align: justify;
        }
      }
    }
  }
}

/* ---------------------------------------------------------------------------- */
/* --------------------------- cube section ----------------------------------- */
/* ---------------------------------------------------------------------------- */

/* key point for implemention ==> we use "position:absolute" and then "transform" property to position each 
item in 3d space */

/* absolute positionaning and transform properies needed for each item to move in 3d space!  */

:root {
  --cubie-size: 3rem;
  --gap: 0px;
  --cubeX: 0deg;
  --cubeY: 0deg;
  --layer-rotateX: 0deg;
  --layer-rotateY: 0deg;
  --layer-rotateZ: 0deg;
}

#cubeSection {
  margin-bottom: 10rem;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  .cubeContainer {
    perspective: 5000px;
    transform-origin: center;
    transform-style: preserve-3d;
    border: 2px solid black;
    width: 80%;
    height: 30rem;
    transform: rotateY(var(--cubeX)) rotateX(var(--cubeY));

    .cubie {
      backface-visibility: visible;
      width: var(--cubie-size);
      height: var(--cubie-size);
      transform-style: preserve-3d;
      position: absolute;
      top: 50%;
      left: 50%;
      transition: transform 1s ease;
      transform:
        translate(-50%, -50%) translate3d(calc((var(--x) - 1) * (var(--cubie-size) + var(--gap))),
          calc((var(--y) - 1) * (var(--cubie-size) + var(--gap))),
          calc((var(--z) - 1) * (var(--cubie-size) + var(--gap))));


      div {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 1px solid black;


        /* Front face */
        &:nth-child(1) {
          background: red;
          transform: translateZ(calc(var(--cubie-size) / 2));
        }

        /* Back face */
        &:nth-child(2) {
          background: orange;
          transform: rotateY(180deg) translateZ(calc(var(--cubie-size) / 2));
        }

        /* Top face */
        &:nth-child(3) {
          background: white;
          transform: rotateX(90deg) translateZ(calc(var(--cubie-size) / 2));
        }

        /* Bottom face */
        &:nth-child(4) {
          background: yellow;
          transform: rotateX(-90deg) translateZ(calc(var(--cubie-size) / 2));
        }

        /* Right face */
        &:nth-child(5) {
          background: blue;
          transform: rotateY(90deg) translateZ(calc(var(--cubie-size) / 2));
        }

        /* Left face */
        &:nth-child(6) {
          background: green;
          transform: rotateY(-90deg) translateZ(calc(var(--cubie-size) / 2));
        }

      }
    }

  }
}


/* ---------------------------------------------------------------------------- */
/* --------------------------- Rubic section ---------------------------------- */
/* ---------------------------------------------------------------------------- */

#rubicSection {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  transform-style: preserve-3d;
  margin-bottom: 10rem;

  .scene {
    transform-style: preserve-3d;
    width: 40rem;
    height: 40rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 2px solid red;

    .box {
      transform-style: preserve-3d;
      position: relative;
      transform: rotate(30deg);

      .boxSide {
        width: 100px;
        height: 100px;
        border-radius: 4px;
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;

        &.boxFront {
          background-color: orange;
          transform: translateZ(50px);
        }

        &.boxBack {
          background-color: skyblue;
          transform: translateZ(-50px);
        }

        &.boxTop {
          background-color: green;
          transform: translateY(-50px) rotateX(90deg);
        }

        &.boxBottom {
          background-color: yellow;
          transform: translateY(50px) rotateX(90deg);
        }

        &.boxLeft {
          background-color: gray;
          transform: translateX(-50px) rotateY(90deg);
        }

        &.boxRight {
          background-color: red;
          transform: translateX(50px) rotateY(90deg);
        }

      }

    }

  }
}